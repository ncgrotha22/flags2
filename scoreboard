<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Retro Flag Game Scoreboard</title>
  <style>
    /* Retro scoreboard styling */
    :root{
      --bg:#0b0b0b;
      --accent:#fefefe;
      --blackTeamBg:#0b0b0b;
      --whiteTeamBg:#f6f6f6;
      --border: #c8c8c8;
      --retro-font: 'Courier New', monospace;
    }
    html,body{height:100%;margin:0;background:var(--bg);color:var(--accent);font-family:var(--retro-font);}
    .wrap{display:flex;flex-direction:column;align-items:center;justify-content:flex-start;padding:20px;gap:18px;}
    header{display:flex;align-items:center;justify-content:center;flex-direction:column;gap:6px;}
    h1{margin:0;font-size:2.1rem;letter-spacing:2px;}
    .top-row{display:flex;gap:20px;align-items:stretch;}
    .team-box{width:260px;height:140px;border:6px solid var(--border);display:flex;flex-direction:column;align-items:center;justify-content:center;border-radius:6px;}
    .team-box .label{font-size:0.95rem;opacity:0.9}
    .team-box .score{font-size:3.6rem;font-weight:700;margin-top:6px}
    .black-box{background:var(--blackTeamBg);color:var(--accent)}
    .white-box{background:var(--whiteTeamBg);color:#000}
    .center-msg{min-width:260px;display:flex;flex-direction:column;align-items:center;justify-content:center;}
    .center-msg .status{font-size:1.1rem;padding:6px 10px;border:3px solid var(--border);border-radius:4px;background:#111}
    .timer{margin-top:6px;font-size:1.0rem;}
    /* leaderboard table */
    .leaderboard{width:820px;border:6px solid var(--border);padding:10px;border-radius:6px;background:#0e0e0e}
    table{width:100%;border-collapse:collapse;color:var(--accent)}
    th,td{padding:8px 10px;text-align:left;border-bottom:1px dashed rgba(200,200,200,0.08);font-size:1.05rem}
    th{font-size:0.95rem;opacity:0.9}
    tr.leader{background:linear-gradient(90deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01))}
    .rank-cell{font-weight:700;width:60px}
    .team-pill{display:inline-block;padding:4px 8px;border-radius:12px;font-size:0.9rem;border:2px solid rgba(255,255,255,0.08)}
    .team-pill.black{background:#000;color:#fff;border-color:#fff}
    .team-pill.white{background:#fff;color:#000;border-color:#000}
    /* small controls */
    .controls{display:flex;gap:8px;align-items:center}
    button{padding:8px 12px;border-radius:6px;border:0;background:#222;color:var(--accent);cursor:pointer}
    button.secondary{background:#444}
    .small{font-size:0.9rem}
    footer{color:#888;font-size:0.85rem;margin-top:10px}
    @media(max-width:900px){
      .leaderboard{width:100%}
      .top-row{flex-direction:column;align-items:center}
    }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>FLAG CAPTURE SCOREBOARD</h1>
      <div style="opacity:0.8;font-size:0.95rem">Black vs White — retro scoreboard</div>
    </header>

    <div class="top-row">
      <div class="team-box black-box">
        <div class="label">⚫ BLACK</div>
        <div id="blackScore" class="score">0</div>
      </div>

      <div class="center-msg">
        <div id="leaderText" class="status">Waiting for data...</div>
        <div class="timer" id="timerDisplay" style="display:none"></div>
        <div style="margin-top:8px" class="controls">
          <button id="refreshBtn" class="small">Refresh Now</button>
          <button id="fullscreenBtn" class="small secondary">Fullscreen</button>
        </div>
      </div>

      <div class="team-box white-box">
        <div class="label">⚪ WHITE</div>
        <div id="whiteScore" class="score">0</div>
      </div>
    </div>

    <div class="leaderboard" aria-live="polite">
      <table>
        <thead>
          <tr><th>Rank</th><th>Gamer Tag</th><th>Team</th><th>Flags Captured</th></tr>
        </thead>
        <tbody id="leaderBody">
          <tr><td colspan="4" style="opacity:0.6">Loading leaderboard...</td></tr>
        </tbody>
      </table>
    </div>

    <footer>Auto‑refresh every <span id="refreshIntervalLabel">10</span>s • Published Google Sheet must be public CSV</footer>
  </div>

<script>
const sheetUrl = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpIdxq0SCnPly4D7URzwg-z8DaVbrIpI4vb1oPcxR_JVg8klUeSh76w8v260ZttPPK5Y3GDvE6_VYq/pubhtml?gid=749829186&single=true";
const refreshSeconds = 10;      // auto‑refresh frequency (seconds)
let timerEnabled = false;       // default: no countdown timer visible
let timerRemaining = 0;         // seconds
let timerIntervalId = null;
let refreshIntervalId = null;

/* ======= Simple CSV parser (handles quoted fields) ====== */
function parseCSV(text){
  const rows = [];
  let cur = '';
  let row = [];
  let inQuotes = false;
  for(let i=0;i<text.length;i++){
    const ch = text[i];
    const nxt = text[i+1];
    if(ch === '"' ){
      if(inQuotes && nxt === '"'){ // escaped quote
        cur += '"';
        i++;
      } else {
        inQuotes = !inQuotes;
      }
    } else if(ch === ',' && !inQuotes){
      row.push(cur);
      cur = '';
    } else if((ch === '\n' || ch === '\r') && !inQuotes){
      if(ch === '\r' && text[i+1] === '\n'){ continue; }
      row.push(cur);
      cur = '';
      if(row.length > 1 || row[0] !== '') rows.push(row);
      row = [];
    } else {
      cur += ch;
    }
  }
  if(cur !== '' || row.length>0){
    row.push(cur);
    if(row.length > 1 || row[0] !== '') rows.push(row);
  }
  return rows;
}

function mapHeaders(headerRow){
  const map = {};
  headerRow.forEach((h,i)=>{
    const key = (h||'').toString().trim().toLowerCase();
    map[key] = i;
  });
  return map;
}

async function loadAndRender(){
  try {
    const resp = await fetch(sheetUrl, {cache: "no-store"});
    if(!resp.ok) throw new Error("Failed to fetch sheet (HTTP " + resp.status + ")");
    const txt = await resp.text();
    const rows = parseCSV(txt);
    if(rows.length < 1) throw new Error("CSV is empty");

    const header = rows[0].map(h=>h.trim());
    const hmap = mapHeaders(header);

    const gamerKeys = ["gamer tag","gamertag","player","player name","name"];
    const teamKeys = ["team","what team are you on?","what team","team name"];
    const flagsKeys = ["flags captured","score","flags","flags captured "];

    function findIndex(possibleKeys){
      for(const k of possibleKeys){
        if(hmap[k] !== undefined) return hmap[k];
      }
      for(const hh in hmap){
        for(const k of possibleKeys){
          if(hh.indexOf(k) !== -1) return hmap[hh];
        }
      }
      return -1;
    }

    const idxGamer = findIndex(gamerKeys);
    const idxTeam = findIndex(teamKeys);
    const idxFlags = findIndex(flagsKeys);

    const data = [];
    for(let r=1;r<rows.length;r++){
      const row = rows[r];
      if(row.length === 0) continue;
      let gamer = idxGamer >=0 ? row[idxGamer] : (row[0] || "");
      let team = idxTeam >=0 ? row[idxTeam] : (row[1] || "");
      let flags = idxFlags >=0 ? row[idxFlags] : (row[2] || "0");
      gamer = (gamer||"").trim();
      team = (team||"").trim();
      flags = parseInt((flags||"0").toString().replace(/[^0-9]/g,'')) || 0;
      if(gamer !== "") data.push({gamer, team, flags});
    }

    if(data.length === 0 && rows.length>1){
      for(let r=1;r<rows.length;r++){
        const row = rows[r];
        let numericIdx = row.findIndex(cell=>/^\s*\d+\s*$/.test(cell));
        if(numericIdx === -1) numericIdx = row.findIndex(cell=>/\d/.test(cell));
        const gamer = row[0] || "";
        const team = row[1] || "";
        const flags = numericIdx>=0 ? parseInt(row[numericIdx]) || 0 : 0;
        if((gamer||"").trim()!=="") data.push({gamer: gamer.trim(), team: team.trim(), flags});
      }
    }

    data.sort((a,b)=> b.flags - a.flags || a.gamer.localeCompare(b.gamer));

    const blackTotal = data.reduce((s, item)=> s + (item.team.toLowerCase().includes("black")? item.flags:0), 0);
    const whiteTotal = data.reduce((s, item)=> s + (item.team.toLowerCase().includes("white")? item.flags:0), 0);
    document.getElementById("blackScore").textContent = blackTotal;
    document.getElementById("whiteScore").textContent = whiteTotal;

    const leaderEl = document.getElementById("leaderText");
    if(blackTotal > whiteTotal) leaderEl.textContent = "⚫ BLACK is in the lead!";
    else if(whiteTotal > blackTotal) leaderEl.textContent = "⚪ WHITE is in the lead!";
    else leaderEl.textContent = "It’s a tie!";

    const tbody = document.getElementById("leaderBody");
    tbody.innerHTML = "";
    if(data.length === 0){
      tbody.innerHTML = '<tr><td colspan="4" style="opacity:0.6">No players yet</td></tr>';
    } else {
      data.forEach((row, idx)=>{
        const tr = document.createElement("tr");
        if(idx === 0) tr.classList.add("leader");
        const rankCell = `<td class="rank-cell">${idx+1}</td>`;
        const gamerCell = `<td>${escapeHtml(row.gamer)}</td>`;
        const teamClass = row.team.toLowerCase().includes("black") ? "team-pill black" : "team-pill white";
        const teamCell = `<td><span class="${teamClass}">${escapeHtml(row.team||"")}</span></td>`;
        const flagsCell = `<td>${row.flags}</td>`;
        tr.innerHTML = rankCell + gamerCell + teamCell + flagsCell;
        tbody.appendChild(tr);
      });
    }

  } catch(err){
    console.error(err);
    const tbody = document.getElementById("leaderBody");
    tbody.innerHTML = `<tr><td colspan="4" style="opacity:0.6">Error loading data: ${escapeHtml(err.message)}</td></tr>`;
    document.getElementById("leaderText").textContent = "Error loading scores";
  }
}

function escapeHtml(s){ return (s||"").toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"); }

document.getElementById("refreshBtn").addEventListener("click", ()=> loadAndRender());
document.getElementById("fullscreenBtn").addEventListener("click", ()=>{
  const el = document.documentElement;
  if(!document.fullscreenElement) el.requestFullscreen?.();
  else document.exitFullscreen?.();
});

loadAndRender();
refreshIntervalId = setInterval(loadAndRender, refreshSeconds * 1000);
document.getElementById("refreshIntervalLabel").textContent = refreshSeconds.toString();

(function checkQueryTimer(){
  const params = new URLSearchParams(window.location.search);
  const t = params.get('timer');
  if(t){
    const minutes = parseInt(t);
    if(!isNaN(minutes) && minutes>0){
      startTimer(minutes*60);
    }
  }
})();
</script>
</body>
</html>
